import { PropsWithChildren } from "react";
import { Navigate } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";

/**
 * ğŸ”’ ProtectedRoute
 * - ProtÃ¨ge une route selon l'authentification et, optionnellement, un rÃ´le.
 * - Si l'utilisateur n'est pas connectÃ© â†’ redirection vers /login.
 * - Si le rÃ´le ne correspond pas â†’ redirection vers /mon-compte (ou une page dâ€™erreur dÃ©diÃ©e).
 */
type ProtectedRouteProps = PropsWithChildren & {
  role?: "user" | "admin"; // rÃ´le requis (optionnel)
};

export const ProtectedRoute = ({ children, role }: ProtectedRouteProps) => {
  const { token, role: userRole } = useAuth();

  const isLoggedIn = Boolean(token);

  // ğŸ§­ Non connectÃ© â†’ redirection vers la page de connexion
  if (!isLoggedIn) {
    return <Navigate to="/login" replace />;
  }

  // ğŸš« ConnectÃ© mais rÃ´le insuffisant â†’ redirection par dÃ©faut
  if (role && userRole !== role) {
    // Tu pourrais rediriger vers une page 403 personnalisÃ©e ici :
    // return <Navigate to="/forbidden" replace />;
    return <Navigate to="/mon-compte" replace />;
  }

  // âœ… AccÃ¨s autorisÃ©
  return <>{children}</>;
};
